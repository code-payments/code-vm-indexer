// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: indexer/vm_indexer_service.proto

package indexer

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on GetVirtualTimelockAccountsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetVirtualTimelockAccountsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVmAccount() == nil {
		return GetVirtualTimelockAccountsRequestValidationError{
			field:  "VmAccount",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVmAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualTimelockAccountsRequestValidationError{
				field:  "VmAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetOwner() == nil {
		return GetVirtualTimelockAccountsRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualTimelockAccountsRequestValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVirtualTimelockAccountsRequestValidationError is the validation error
// returned by GetVirtualTimelockAccountsRequest.Validate if the designated
// constraints aren't met.
type GetVirtualTimelockAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVirtualTimelockAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVirtualTimelockAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVirtualTimelockAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVirtualTimelockAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVirtualTimelockAccountsRequestValidationError) ErrorName() string {
	return "GetVirtualTimelockAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVirtualTimelockAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVirtualTimelockAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVirtualTimelockAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVirtualTimelockAccountsRequestValidationError{}

// Validate checks the field values on GetVirtualTimelockAccountsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetVirtualTimelockAccountsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetVirtualTimelockAccountsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetVirtualTimelockAccountsResponseValidationError is the validation error
// returned by GetVirtualTimelockAccountsResponse.Validate if the designated
// constraints aren't met.
type GetVirtualTimelockAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVirtualTimelockAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVirtualTimelockAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVirtualTimelockAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVirtualTimelockAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVirtualTimelockAccountsResponseValidationError) ErrorName() string {
	return "GetVirtualTimelockAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVirtualTimelockAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVirtualTimelockAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVirtualTimelockAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVirtualTimelockAccountsResponseValidationError{}

// Validate checks the field values on GetVirtualDurableNonceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVirtualDurableNonceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVmAccount() == nil {
		return GetVirtualDurableNonceRequestValidationError{
			field:  "VmAccount",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVmAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualDurableNonceRequestValidationError{
				field:  "VmAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAddress() == nil {
		return GetVirtualDurableNonceRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualDurableNonceRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVirtualDurableNonceRequestValidationError is the validation error
// returned by GetVirtualDurableNonceRequest.Validate if the designated
// constraints aren't met.
type GetVirtualDurableNonceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVirtualDurableNonceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVirtualDurableNonceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVirtualDurableNonceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVirtualDurableNonceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVirtualDurableNonceRequestValidationError) ErrorName() string {
	return "GetVirtualDurableNonceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVirtualDurableNonceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVirtualDurableNonceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVirtualDurableNonceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVirtualDurableNonceRequestValidationError{}

// Validate checks the field values on GetVirtualDurableNonceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVirtualDurableNonceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualDurableNonceResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVirtualDurableNonceResponseValidationError is the validation error
// returned by GetVirtualDurableNonceResponse.Validate if the designated
// constraints aren't met.
type GetVirtualDurableNonceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVirtualDurableNonceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVirtualDurableNonceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVirtualDurableNonceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVirtualDurableNonceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVirtualDurableNonceResponseValidationError) ErrorName() string {
	return "GetVirtualDurableNonceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVirtualDurableNonceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVirtualDurableNonceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVirtualDurableNonceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVirtualDurableNonceResponseValidationError{}

// Validate checks the field values on GetVirtualRelayAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVirtualRelayAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVmAccount() == nil {
		return GetVirtualRelayAccountRequestValidationError{
			field:  "VmAccount",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVmAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualRelayAccountRequestValidationError{
				field:  "VmAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetAddress() == nil {
		return GetVirtualRelayAccountRequestValidationError{
			field:  "Address",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualRelayAccountRequestValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVirtualRelayAccountRequestValidationError is the validation error
// returned by GetVirtualRelayAccountRequest.Validate if the designated
// constraints aren't met.
type GetVirtualRelayAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVirtualRelayAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVirtualRelayAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVirtualRelayAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVirtualRelayAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVirtualRelayAccountRequestValidationError) ErrorName() string {
	return "GetVirtualRelayAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVirtualRelayAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVirtualRelayAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVirtualRelayAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVirtualRelayAccountRequestValidationError{}

// Validate checks the field values on GetVirtualRelayAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVirtualRelayAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVirtualRelayAccountResponseValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetVirtualRelayAccountResponseValidationError is the validation error
// returned by GetVirtualRelayAccountResponse.Validate if the designated
// constraints aren't met.
type GetVirtualRelayAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVirtualRelayAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVirtualRelayAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVirtualRelayAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVirtualRelayAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVirtualRelayAccountResponseValidationError) ErrorName() string {
	return "GetVirtualRelayAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVirtualRelayAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVirtualRelayAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVirtualRelayAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVirtualRelayAccountResponseValidationError{}
